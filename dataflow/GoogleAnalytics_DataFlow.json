{
	"name": "GoogleAnalytics_DataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "GoogleAnalyics_GetFiles",
						"type": "DatasetReference"
					},
					"name": "SourceProcessFiles"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "GoogleAnalytics_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          date as string,",
				"          datetime as string,",
				"          country as string,",
				"          eventName as string,",
				"          deviceCategory as string,",
				"          unifiedScreenName as string,",
				"          activeUsers as string,",
				"          eventCount as string,",
				"          screenPageViews as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceProcessFiles",
				"SourceProcessFiles derive(date = toDate(date, 'dd/MM/yyyy'),",
				"          datetime = toTimestamp(datetime, 'dd/MM/yyyy HH:mm'),",
				"          country = country,",
				"          eventName = eventName,",
				"          deviceCategory = deviceCategory,",
				"          unifiedScreenName = unifiedScreenName,",
				"          activeUsers = toInteger(activeUsers),",
				"          eventCount = toInteger(eventCount),",
				"          screenPageViews = toInteger(screenPageViews)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     preSQLs:['drop table if exists Temp_Raw_GoogleAnalytics'],",
				"     postSQLs:['delete rg \\nfrom Raw_GoogleAnalytics rg\\ninner join Temp_Raw_GoogleAnalytics trg\\non rg.date = trg.date and rg.country = trg.country and rg.eventName = trg.eventName and rg.deviceCategory = trg.deviceCategory and rg.unifiedScreenName = trg.unifiedScreenName','with raw_data as (\\n    select \\n        country\\n        ,eventName\\n        ,deviceCategory\\n        ,unifiedScreenName\\n        ,sum(activeUsers) as activeUsers\\n        ,sum(eventCount) as eventCount\\n        ,sum(screenPageViews) as screenPageViews \\n    from Raw_GoogleAnalytics\\n    group by country,eventName,deviceCategory,unifiedScreenName\\n)\\n, tmp_raw_data as (\\n    select\\n        date\\n        , datetime\\n        , country\\n        , eventName\\n        , deviceCategory\\n        , unifiedScreenName\\n        , activeUsers\\n        , eventCount\\n        , screenPageViews\\n    from Temp_Raw_GoogleAnalytics\\n)\\n, diff_calc as (\\n    select \\n        trg.date\\n        , trg.datetime\\n        , trg.country\\n        , trg.eventName\\n        , trg.deviceCategory\\n        , trg.unifiedScreenName\\n        , case when rg.activeUsers is null then trg.activeUsers else (trg.activeUsers - rg.activeUsers) end as activeUsers\\n        , case when rg.eventCount is null then trg.eventCount else (trg.eventCount - rg.eventCount) end as eventCount\\n        , case when rg.screenPageViews is null then trg.screenPageViews else (trg.screenPageViews - rg.screenPageViews) end as screenPageViews\\n    from tmp_raw_data trg\\n    left outer join raw_data rg\\n    on trg.country = rg.country and trg.eventName = rg.eventName and trg.deviceCategory = rg.deviceCategory and trg.unifiedScreenName = rg.unifiedScreenName\\n)\\ninsert into Raw_GoogleAnalytics\\n    select\\n        date\\n        , datetime\\n        , country\\n        , eventName\\n        , deviceCategory\\n        , unifiedScreenName\\n        , activeUsers\\n        , eventCount\\n        , screenPageViews\\n    from diff_calc\\n    where activeUsers > 0 or eventCount > 0 or screenPageViews > 0','drop table if exists Temp_Raw_GoogleAnalytics'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}